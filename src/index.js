// This code is not ideal
// Please send issue - https://github.com/LastVibe-ru/lastvibeAd/issues

const { Client, GatewayIntentBits, Events, ActionRowBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle,
    Embed
} = require('discord.js');

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

const fs = require('fs');

const express = require('express');

const app = express();
const port = 8091;

const config = JSON.parse(fs.readFileSync('config.json', 'utf-8'));

// Don't try using api in commit hystory
// We create new api >_<

const TOKEN = config.api_key;

client.once(Events.ClientReady, () => {
    console.log(`Logged in as ${client.user.tag}!`);

    startServer();
});

function startServer(){
    app.get('/ban', async (req, res) => {
        const { name, reason, key } = req.query;
        
        if (!name || !reason || !key){
            res.status(400).send("Bad gateway");

            return;
        }

        if (key != config.api_key){
            res.status(400).send("Unauthorized");

            return;
        }

        const embed = new EmbedBuilder()
            .setTitle(`–ò–≥—Ä–æ–∫ ${name} –∑–∞–±–∞–Ω–µ–Ω`)
            .setDescription(`–ü—Ä–∏—á–∏–Ω–∞: ${reason}`);

        const banChanal = client.channels.cache.get(config.ban_channel);

        await banChanal.send({ embeds: [embed] });
        
    });

    app.get('/unban', async (req, res) => {
        const {name, key} = req.query;

        if (!name || !key){
            res.status(400).send("Bad gateway");

            return;
        }

        if (key != config.api_key){
            res.status(400).send("Unauthorized")

            return;
        }

        const embed = new EmbedBuilder()
            .setTitle(`–ò–≥—Ä–æ–∫ ${name} —Ä–∞–∑–±–∞–Ω–µ–Ω`)

        const banChanal = client.channels.cache.get(config.ban_channel);

        await banChanal.send({ embeds: [embed] });
    });

    app.listen(port, () => {
        console.log(`Server started at ${port}`);
    });
}

client.on(Events.MessageCreate, async message => {
    if (message.content === '!botCreate') {
        const button = new ButtonBuilder()
            .setCustomId('openModal')
            .setLabel('–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(button);

        const embed = new EmbedBuilder()
            .setTitle('üì∞ –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
            .setDescription('–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤—Å–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –æ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–æ–µ–∫—Ç–µ –∏ —Ç.–¥. \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –∫–æ–º—É-–Ω–∏–±—É–¥—å –≤ –¥–∏—Å–∫–æ—Ä–¥–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –ü–ö–ú, "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" –∏–ª–∏ "Copy link"\n\n**–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è! –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <#1338533231582249072>.**')
            .setImage('https://media.discordapp.net/attachments/1299609343829737512/1346097727448289342/11.jpg?ex=67c6f2b3&is=67c5a133&hm=0eb3e69d9586c5dc13c1918ba0987472d76cd58b06a0850b28264a9d1ad026d4&=&format=webp&width=1073&height=434');

        await message.channel.send({ embeds: [embed], components: [row] });
    }

    if (message.content === '!botQue'){
        const buttonQue = new ButtonBuilder()
            .setCustomId('openModalQue')
            .setLabel('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(buttonQue);

        const embedQue = new EmbedBuilder()
            .setTitle('üì© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é')
            .setDescription('–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞, –∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. \n–ò–¥–µ–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –Ω–∞–º –∏–ª–∏ –Ω–∞–±—Ä–∞–≤—à–∏–µ –º–Ω–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã. \n\n–ü–∏—à–∏—Ç–µ –æ–±–¥—É–º–∞–Ω–Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–æ.');

        await message.channel.send({ embeds: [embedQue], components: [row] });
    }

    if (message.content === '!botInfo') {
        const btnAds = new ButtonBuilder()
            .setCustomId('addRoleAds')
            .setLabel('üì¢')
            .setStyle(ButtonStyle.Primary);

        const btnEvents = new ButtonBuilder()
            .setCustomId('addRoleEvents')
            .setLabel('üéà')
            .setStyle(ButtonStyle.Success);

        const btnContent = new ButtonBuilder()
            .setCustomId('addRoleContent')
            .setLabel('üé•')
            .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(btnAds, btnContent, btnEvents);

        const embed = new EmbedBuilder()
            .setDescription('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üì¢, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –∏–≥—Ä–æ–∫–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üé•, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –≤–∏–¥–µ–æ –∏ —Å—Ç—Ä–∏–º–∞—Ö –æ—Ç –∏–≥—Ä–æ–∫–æ–≤.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üéà, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∏–≤–µ–Ω—Ç–∞—Ö –æ—Ç –∏–≥—Ä–æ–∫–æ–≤.');

        await message.channel.send({ embeds: [embed], components: [row] });
    }
});

client.on(Events.InteractionCreate, async interaction => {
    try {
        if (interaction.customId === 'openModal') {
            const modal = new ModalBuilder()
                .setCustomId('adModal')
                .setTitle('–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');

            const titleInput = new TextInputBuilder()
                .setCustomId('title')
                .setLabel('–ó–∞–≥–æ–ª–æ–≤–æ–∫')
                .setPlaceholder('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞...')
                .setStyle(TextInputStyle.Short);

            const descriptionInput = new TextInputBuilder()
                .setCustomId('description')
                .setPlaceholder('–°–µ–≥–æ–¥–Ω—è...')
                .setLabel('–û–ø–∏—Å–∞–Ω–∏–µ')
                .setStyle(TextInputStyle.Paragraph);

            const urlInput = new TextInputBuilder()
                .setCustomId('url')
                .setLabel('Url –∫–∞—Ä—Ç–∏–Ω–∫–∏')
                .setPlaceholder('https://media.discordapp.net/...')
                .setRequired(false)
                .setStyle(TextInputStyle.Short);

            const titleRow = new ActionRowBuilder().addComponents(titleInput);
            const descriptionRow = new ActionRowBuilder().addComponents(descriptionInput);
            const urlRow = new ActionRowBuilder().addComponents(urlInput);

            modal.addComponents(titleRow, descriptionRow, urlRow);

            await interaction.showModal(modal);
        }

        if (interaction.customId === 'openModalQue'){
            const modal = new ModalBuilder()
                .setCustomId('modalQue')
                .setTitle('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–¥–µ–∏');

            const titleInput = new TextInputBuilder()
                .setCustomId('idea')
                .setLabel('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('–Ø –¥—É–º–∞—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—ã —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ–ª–æ—Å—å...');

            const row = new ActionRowBuilder().addComponents(titleInput);

            modal.addComponents(row);

            await interaction.showModal(modal);
        }

        if (interaction.isModalSubmit() && interaction.customId === 'adModal') {
            const title = interaction.fields.getTextInputValue('title');
            const description = interaction.fields.getTextInputValue('description');
            const url = interaction.fields.getTextInputValue('url');

            const adChannel = client.channels.cache.get(config.ad_channel);
            if (!adChannel) {
                return interaction.reply({ content: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
            }

            if (url && url.trim() !== ''){
                const embed = new EmbedBuilder()
                    .setAuthor({ name: interaction.user.displayName })
                    .setTitle(title)
                    .setDescription(description)
                    .setImage(url);

                await adChannel.send({ embeds: [embed] });
                await interaction.reply({ content: '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', ephemeral: true });
            } else {
                const embed = new EmbedBuilder()
                    .setAuthor({ name: interaction.user.displayName })
                    .setTitle(title)
                    .setDescription(description);

                await adChannel.send({ embeds: [embed] });
                await interaction.reply({ content: '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', ephemeral: true });
            }
        }

        if (interaction.isModalSubmit() && interaction.customId === 'modalQue'){
            const idea = interaction.fields.getTextInputValue('idea');

            const queChannel = client.channels.cache.get(config.que_channel);
            if (!queChannel){
                return interaction.reply({ content: '–£–ø—Å, –æ—à–∏–±–∫–∞. –°–∫–æ—Ä–æ –ø–æ—á–∏–Ω–∏–º', ephemeral: true });
            }

            const embed = new EmbedBuilder()
                .setTitle(`–ò–¥–µ—è –æ—Ç ${interaction.user.displayName}`)
                .setDescription(idea)
                .setFooter({ text: '–û—Ü–µ–Ω–∏—Ç–µ –∏–¥–µ—é —Ä–µ–∞–∫—Ü–∏–µ–π üëç –∏–ª–∏ üëé' });

            const msg = await queChannel.send({ embeds: [embed] });
            await msg.react('üëç');
            await msg.react('üëé');

            await interaction.reply({ content: '–í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
        }

        if (interaction.customId === 'addRoleAds') {
            const member = interaction.member;
            const role = interaction.guild.roles.cache.find(r => r.name === 'Advertisements');

            if (role) {
                if (member.roles.cache.has(role.id)) {
                    await member.roles.remove(role).catch(console.error);
                    await interaction.reply({ content: '–†–æ–ª—å —É–±—Ä–∞–Ω–∞', ephemeral: true });
                } else {
                    await member.roles.add(role).catch(console.error);
                    await interaction.reply({ content: '–†–æ–ª—å –≤—ã–¥–∞–Ω–∞', ephemeral: true });
                }
            } else {
                await interaction.reply({ content: '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ', ephemeral: true });
            }
        }

        if (interaction.customId === 'addRoleEvents') {
            const member = interaction.member;
            const role = interaction.guild.roles.cache.find(r => r.name === 'Events');

            if (role) {
                if (member.roles.cache.has(role.id)) {
                    await member.roles.remove(role).catch(console.error);
                    await interaction.reply({ content: '–†–æ–ª—å —É–±—Ä–∞–Ω–∞', ephemeral: true });
                } else {
                    await member.roles.add(role).catch(console.error);
                    await interaction.reply({ content: '–†–æ–ª—å –≤—ã–¥–∞–Ω–∞', ephemeral: true });
                }
            } else {
                await interaction.reply({ content: '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ', ephemeral: true });
            }
        }

        if (interaction.customId === 'addRoleContent') {
            const member = interaction.member;
            const role = interaction.guild.roles.cache.find(r => r.name === 'Contents');

            if (role) {
                if (member.roles.cache.has(role.id)) {
                    await member.roles.remove(role).catch(console.error);
                    await interaction.reply({content: '–†–æ–ª—å —É–±—Ä–∞–Ω–∞', ephemeral: true});
                } else {
                    await member.roles.add(role).catch(console.error);
                    await interaction.reply({content: '–†–æ–ª—å –≤—ã–¥–∞–Ω–∞', ephemeral: true});
                }
            } else {
                await interaction.reply({content: '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ', ephemeral: true});
            }
        }
    } catch (error) {
        console.error(error);
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', ephemeral: true });
    }
});

client.login(TOKEN);
